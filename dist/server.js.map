{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","db","enable","get","req","res","console","log","method","url","headers","collection","find","toArray","then","issues","length","metadata","total_count","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","title","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["import 'babel-polyfill';\r\n\r\nimport SourceMapSupport from 'source-map-support';\r\n\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nimport Issue from './issue.js';\r\n\r\nSourceMapSupport.install();\r\nconst app = express();\r\n/* Initialises express to use static middleware in the site */\r\napp.use(express.static('static'));\r\n/* enable body parsing */\r\napp.use(bodyParser.json());\r\n\r\n// define db in global scope.\r\nlet db;\r\n\r\n/* enable strong etags */\r\napp.enable('etag');\r\n\r\napp.get('/api/issues', (req, res) => {\r\n  console.log(req.method + ': ' + req.url + ', ' + req.headers['user-agent']);\r\n\r\n  db.collection('issues').find().toArray().then((issues) => {\r\n    console.log(issues.length + ' issues retrieved.')\r\n    const metadata = {total_count: issues.length};\r\n    res.json({ _metadata: metadata, records: issues});\r\n  }).catch((error) => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}`});\r\n  });\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n  console.log(req.method + ': ' + req.url + ', ' + req.headers['user-agent']);\r\n\r\n  const newIssue = req.body;\r\n  newIssue.created = new Date();\r\n  if(!newIssue.status) {\r\n    newIssue.status = 'New';\r\n  }\r\n\r\n  const err = Issue.validateIssue(newIssue);\r\n  if(err) {\r\n    console.log(err);\r\n    res.status(422).json({ message: `Invalid request: ${err}` });\r\n    return;\r\n  }\r\n\r\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result => \r\n        db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\r\n    ).then((newIssue) => {\r\n      console.log('Posted new issue: ' + newIssue.title);\r\n      res.json(newIssue);\r\n    }).catch((error) => {\r\n      console.log(error);\r\n      res.status(500).json({ message: 'Internal Server Error: $(error)' });\r\n    });\r\n});\r\n\r\nconsole.log('About to attempt starting!');\r\n\r\n// Connect to database and start server\r\nMongoClient.connect('mongodb://localhost:27017/issuetracker').then((connection) => {\r\n  db = connection;\r\n  app.listen(3000, function() {\r\n    console.log('App started on port 3000');\r\n  }); \r\n}).catch((error) => {\r\n  console.log('ERROR: ', error);\r\n});\r\n"]}