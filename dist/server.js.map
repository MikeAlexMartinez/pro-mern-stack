{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","db","enable","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","method","url","headers","collection","find","toArray","then","issues","length","metadata","total_count","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","_id","result","insertedId","limit","next","title","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["/* ES2015 style import statements */\r\nimport SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\nimport 'babel-polyfill';\r\n\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nimport Issue from './issue.js';\r\n\r\n/* start express */\r\nconst app = express();\r\n/* Initialises express to use static middleware in the site */\r\napp.use(express.static('static'));\r\n/* enable body parsing */\r\napp.use(bodyParser.json());\r\n\r\n// define db in global scope.\r\nlet db;\r\n\r\n/* enable strong etags */\r\napp.enable('etag');\r\n\r\n/* Enables hot module reloading via middleware */\r\nif(process.env.NODE_ENV !== 'production') {\r\n    const webpack = require('webpack');\r\n    const webpackDevMiddleware = require('webpack-dev-middleware');\r\n    const webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n    const config = require('../webpack.config');\r\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\r\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\r\n\r\n    const bundler = webpack(config);\r\n    app.use(webpackDevMiddleware(bundler, {noInfo: true}));\r\n    app.use(webpackHotMiddleware(bundler, {log: console.log}));\r\n}\r\n\r\napp.get('/api/issues', (req, res) => {\r\n    console.log(req.method + \": \" + req.url + \", \" + req.headers[\"user-agent\"]);\r\n    \r\n    db.collection('issues').find().toArray().then(issues => {\r\n        console.log(issues.length + \" issues retrieved.\")\r\n        const metadata = {total_count: issues.length};\r\n        res.json({ _metadata: metadata, records: issues});\r\n    }).catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({ message: \"Internal Server Error: ${error}\"});\r\n    });\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n    console.log(req.method + \": \" + req.url + \", \" + req.headers[\"user-agent\"]);\r\n\r\n    const newIssue = req.body;\r\n    newIssue.created = new Date();\r\n    if(!newIssue.status) {\r\n        newIssue.status = 'New';\r\n    }\r\n\r\n    const err = Issue.validateIssue(newIssue);\r\n    if(err) {\r\n        console.log(err);\r\n        res.status(422).json({ message: \"Invalid request: ${err}\" });\r\n        return;\r\n    }\r\n    \r\n    db.collection('issues').insertOne(newIssue).then(result => \r\n        db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\r\n    ).then(newIssue => {\r\n        console.log(\"Posted new issue: \" + newIssue.title);\r\n        res.json(newIssue);\r\n    }).catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({ message: \"Internal Server Error: $(error)\" });\r\n    });\r\n});\r\n\r\n// Connect to database and start server\r\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\r\n    db = connection;\r\n    app.listen(3000, function() {\r\n        console.log('App started on port 3000');\r\n    }); \r\n}).catch(error => {\r\n    console.log('ERROR: ', error);\r\n});\r\n"]}