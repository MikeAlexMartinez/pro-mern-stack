{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","db","enable","get","req","res","console","log","method","url","headers","filter","query","status","effort_lte","effort_gte","effort","$lte","parseInt","$gte","collection","find","toArray","then","issues","length","metadata","total_count","_metadata","records","catch","error","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","title","issueId","params","id","issue","put","update","convertIssue","savedIssue","delete","deleteOne","deleteResult","n","sendFile","resolve","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["import 'babel-polyfill';\n\nimport SourceMapSupport from 'source-map-support';\n\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport path from 'path';\n\nimport Issue from './issue.js';\n\nSourceMapSupport.install();\nconst app = express();\n/* Initialises express to use static middleware in the site */\napp.use(express.static('static'));\n/* enable body parsing */\napp.use(bodyParser.json());\n\n// define db in global scope.\nlet db;\n\n/* enable strong etags */\napp.enable('etag');\n\napp.get('/api/issues', (req, res) => {\n  console.log(req.method + ' (Updated): ' + req.url + ', ' + req.headers['user-agent']);\n  const filter = {};\n  if (req.query.status) filter.status = req.query.status;\n  if (req.query.effort_lte || req.query.effort_gte) filter.effort = {};\n  if (req.query.effort_lte) filter.effort.$lte = parseInt(req.query.effort_lte, 10);\n  if (req.query.effort_gte) filter.effort.$gte = parseInt(req.query.effort_gte, 10);\n  console.log(filter);\n\n  db.collection('issues').find(filter).toArray().then((issues) => {\n    console.log(issues.length + ' issues retrieved.')\n    const metadata = {total_count: issues.length};\n    res.json({ _metadata: metadata, records: issues});\n  }).catch((error) => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}`});\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  console.log(req.method + ': ' + req.url + ', ' + req.headers['user-agent']);\n\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if(!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if(err) {\n    console.log(err);\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result => \n        db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n    ).then((newIssue) => {\n      console.log('Posted new issue: ' + newIssue.title);\n      res.json(newIssue);\n    }).catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: 'Internal Server Error: $(error)' });\n    });\n});\n\napp.get('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    console.log(\"try: \", req.params.id);\n    issueId = new ObjectId(req.params.id);\n    console.log(issueId);\n  } catch (error) {\n    console.log(req.params.id);\n    console.log(issueId);\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n    return;\n  }\n\n  db.collection('issues').find({ _id: issueId }).limit(1)\n    .next()\n    .then(issue => {\n      if(!issue) res.status(404).json({ message: `No such issue: ${issueId}` });\n      else res.json(issue);\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.put('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    issueId = new ObjectId(req.params.id);\n  } catch(error) {\n    res.status(422).json({message: `Invalid issue ID format: ${error}`});\n    return;\n  }\n\n  const issue = req.body;\n  delete issue._id;\n\n  const err = Issue.validateIssue(issue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').update({ _id: issueId }, Issue.convertIssue(issue))\n    .then(() => db.collection('issues').find({ _id: issueId }).limit(1)\n    .next()\n  )\n  .then(savedIssue => {\n    res.json(savedIssue);\n  }).catch( error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.delete('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    issueId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n    return;\n  }\n\n  db.collection('issues').deleteOne({ _id: issueId }).then((deleteResult) => {\n    if(deleteResult.result.n === 1 ) res.json({ status: 'OK' });\n    else res.json({ status: 'Warning: object not found'});\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve('static/index.html'));\n});\n\nconsole.log('About to attempt starting!');\n\n// Connect to database and start server\nMongoClient.connect('mongodb://localhost:27017/issuetracker').then((connection) => {\n  db = connection;\n  app.listen(3000, function() {\n    console.log('Yay! App started on port 3000');\n  }); \n}).catch((error) => {\n  console.log('ERROR: ', error);\n});\n"]}